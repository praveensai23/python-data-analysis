# -*- coding: utf-8 -*-
"""Analyse Spotify & YouTube Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oV5B-VtIe1pVDVcxKXna6ewoLaOeFoIa
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Spotify Youtube Dataset.csv')

df

"""to know what columns are present"""

df.columns

df.info()

"""Cleaning dataset"""

df.drop(columns=['Unnamed: 0','Url_spotify','Uri','Url_youtube'],inplace=True)

df

df.isnull().sum()

## fill the missing values with 0 in likes and comments
df['Likes'] = df['Likes'].fillna(0)
df['Comments'] = df['Comments'].fillna(0)

## drop the records which containing null values
df.dropna(inplace=True)

df.isnull().sum()

"""1.Top 10 Artists with Highest Views on youtube"""

artist_grouped = df.groupby('Artist')['Views'].sum()

artist_grouped

artist_sorted = artist_grouped.sort_values(ascending=False)

artist_sorted

artist_sorted.head(10)

"""2.Top 10 tracks with highest streams on spotify

"""

x = df[['Track','Stream']]

most_stream = x.sort_values(by=['Stream'],ascending=False).head(10)

most_stream



"""3.5 Tracks with lowest streams on spotify"""

lowesttracks = df[['Track','Stream']]
lowest = lowesttracks.sort_values(by=['Stream'],ascending=True)

lowest.head(5)

"""4.What are most common album types on spotify?"""

df['Album_type'].nunique()

album_type = df['Album_type'].value_counts()

album_type

plt.pie(album_type,labels=album_type.index,autopct='%1.1f%%',colors='rgb',shadow=True,explode=(0.05,0.05,0.05))  ## autopct to show the percentages,explode is used to cut the slices out
plt.show()

"""How do the average Views,Likes,Comments are compared between different album types"""

df_albumtype = df.groupby('Album_type')[['Views','Likes','Comments']].mean()

df_albumtype = df_albumtype.reset_index()

df_albumtype

## melt - unpivot the dataframe
df_melted = pd.melt(df_albumtype,id_vars='Album_type',var_name='Attribute',value_name='Total')  ##id_vars --> columns that you want to keep fix,var_new -->name of the new column,value_name -->name of the new column that contain values

df_melted

plt.figure(figsize=(9,4))
sns.barplot(x = 'Album_type',y = 'Total',hue = 'Attribute',data=df_melted)

"""5.Top 5 youtube channels based on the views"""

top_channels = df.groupby('Channel')['Views'].sum()

top_channels_sorted = top_channels.sort_values(ascending=False)



top_channels_sorted=top_channels_sorted.reset_index()

top_channels_sorted=top_channels_sorted.head(5)

plt.figure(figsize=(9,4))
sns.barplot(x='Views', y='Channel', data=top_channels_sorted)  # Top 10 for readability
plt.show()

"""6.Top most track based on the view"""

top_track = df.groupby('Track')['Views'].sum()

top_track_sorted = top_track.sort_values(ascending=False)

top_track_sorted = top_track_sorted.head(1)

top_track_sorted

"""7.Top 7 tracks which have highest like to view ratio in youtube"""

top_tracks = df[['Track','Likes','Views']]

top_tracks['like to view ratio'] = top_tracks['Likes']/top_tracks['Views']

top_tracks

top_tracks_sort = top_tracks.sort_values(by=['like to view ratio'],ascending=False)

top_tracks_sort = top_tracks_sort.head(7)

top_tracks_sort

"""8.Top 3 tracks which have lowest like to view ratio"""

low_tracks = df[['Track','Likes','Views']]
low_tracks['like to view ratio'] = low_tracks['Likes']/low_tracks['Views']

low_tracks

low_tracks_sort = low_tracks.sort_values(by=['like to view ratio'],ascending=True)

low_tracks_sort = low_tracks_sort.head(3)

low_tracks_sort

"""9.Top album having the tracks with maximum danceability"""

top_albums = df.groupby('Album')['Danceability'].sum()

top_albums_sort = top_albums.sort_values(ascending=False)

top_albums_sort = top_albums_sort.reset_index()

top_albums_sort

top_albums_sort[top_albums_sort['Album']=='Greatest Hits']

"""Correlation between likes,views,comments,stream"""

df_vlcs = df[['Likes','Views','Comments','Stream']]

df_vlcs

df_vlcs.corr()

plt.figure(figsize=(9,4))
sns.heatmap(df_vlcs.corr())

